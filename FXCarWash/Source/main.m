//
//  main.m
//  FXCarWash
//
//  Created by Basil Nikityuk on 7/14/15.
//  Copyright (c) 2015 __MyCompanyName__. All rights reserved.
//

#import <Foundation/Foundation.h>

#import "FXCarWashTests.h"

int main(int argc, const char *argv[]) {
	@autoreleasepool {
		// insert code here...
		NSLog(@"Car Wash");
		
		[FXCarWashTests performCarWashTest];
	}
	
	return 0;
}

/*
 Задание 3.
 Условие:
 1. Есть автомойка и есть админ здание;
 2. И то, и другое является зданием;
 3. Каждое из них имеет отдельные помещения;
 4. Каждое помещение рассчитано на определенное количество людей;
 5. У автомойки помещения могут еще вмещать и машины;
 6. Работники автомойки деляцца на мойщиков, бухгалтеров и директоров;
 7. Все они - люди, у которых разная зарплата, опыт работы и обязанности;
 8. Бухгалтера считают деньги;
 9. Директора получают прибыль;
 10. Мойщики моют машины;
 11. Финансовые потоки идут по пути обработки машины - мойщики - бухгалтера - директора;
 12. Есть машины, у которых есть деньги, до мойки они грязные, а после мойки чистые.
 13. Есть одно здание мойки с одной комнатой и одним мойщиком
 14. Есть одно здание администрации с одной комнатой, в которой сидит бухгалтер и директор.
 Задание:
 Придумать и реализовать иерархию классов автомойки, учитывая, что используецца следуюший процесс взаимодействий:
 1. Мойщику мойки отдают машину
 2. Мойщик моет машину
 3. Мойщик забирает деньги у машины
 4. Мойщик отдает деньги бухгалтеру
 5. Бухгалтер считает деньги
 6. Бухгалтер отдает деньги директору
 7. Директор получает прибыль
*/

/*
 Задание 6.
 Условие:
 Есть иерархия сотрудников из задания 3 cо следующими ограничениями:
 1. 1 мойщик моет одну машину за раз
 2. На всем предприятии есть рандомное количество мойщиков, один бухгалтер и один директор
 3. Выкинуть сами здания
 Задание:
 Реализовать иерархию классов с наблюдением за состоянием со следующим потоком денег: 
 машина заезжает на мойку, после мытья машины мойщик берет деньги у машины, 
 сообщает бухгалтеру, что получил деньги, бухгалтер забирает деньги у мойщика, 
 бухгалтер считает и после этого сообщает директору, что посчитал деньги, и директор их забирает.
*/

/*
 Задание 7.
 Условие:
 Есть иерархия из задания 6.
 Задание:
 1. Бухгалтер и директор на предприятии один и просто синхронизированы на выполнение одной операции за раз 
 (бухгалтер считает деньги одного рабочего, остальные ждут)
 2. Переделать код так, чтобы выполнение операций обработки выполнялось бухгалтерами и мойщиками 
 через performSelectorInBackground в бекграундном потоке с последующей нотификацией наблюдателей в главной потоке
 через performSelectorOnMainThread;
 3. Каждая из асинхронных операций должна выполняцца разное время (через вызов sleep(n) внутри блока);
 4. Надо учесть то, что у нас есть проблема с тем, 
 что сразу из нескольких потоков может модифицировацца массив наблюдателей, 
 что приведет к падению, дял избежания создать потокобезопасный наблюдаемый объект с синхронизацией, 
 отвечающий следующим требованиям:
	 а. может происходить только одна операция с внутренним мутабельным массивом за раз, 
		будь то копирование, добавление или чтение объекта;
	 б. должен быть абстрактным базовым классом, который мы уже в детях расширяем поведением;
	 в. поскольку он ничего не знает о том, какие именно методы будут использовацца для нотификаций в детях, 
		необходимо придумать метод, который бы давал универсальную возможность для нотификации с использованием разных методов 
		(т.е. надо передавать селектор, используемый для нотификаций);
	 г. надо придумать еще один метод, как обертку дял метода из в., 
		который бы перед нотификациями синхронным образом переходил в главный поток и оттуда производил нотификации;
 5. Создать контролирующий класс, который бы занимался управлением автомойкой, т.е. следил (через наблюдение) за тем, 
 кто из рабочих освободился и передавал ему следующую машину для мытья. Контроллер работает следующим образом:
	 а. получил из разных потоков количество машин большее, чем количество мойщиков;
	 б. передал машины мойщикам, а остальные машины стоят в очереди на мытье;
	 в. наблюдает за всеми мойщиками;
	 г. когда мойщик закончил мытье, то необходимо ему передать следующую машину на мытье.
	 д. должен быть потокобезопасным с точки зрения управления мойщиками и очередью машин;
 6. Сгенерировать протокол следующих состояний мойщика и бухгалтера:
	 а. готов к работе
	 б. работает
	 в. нуждается в обработке
 7. Поток денег идет следующим образом:
	 - мойщик получил машину;
	 - мойщик помыл машину;
	 - мойщик забрал деньги у авто;
	 - мойщик сообщил наблюдателям, что завершил работу;
	 - бухгалтер наблюдает за мойщиком;
	 - когда бухгалтер узнал, что мойщик помыл машину, то забрал у мойщика деньги;
	 - мойщик сообщил наблюдателям, что готов к новой работе;
	 - бухгалтер посчитал деньги и сообщил директору, что завершил работу;
	 - директор сделал профит.
 8. вся логика переходов между потоками реализована в родительском классе работник;
	 - необходимо создать такую логику переходов, чтобы:
	 а. наличествовали методы, доступные для перегрузки, которые бы всегда выполнялись в бекграунде и главном потоке;
	 б. эти методы должны быть обернуты в приватные методы, которые и обсепечивают логику переходов между потоками;
	 в. по окончании обработки и переходе в главный поток сам работник должен сообщать наблюдателям, что он закончил работу;
	 - в детях должна быть реализована только сама логика обработки данных на главном и бекграундном потоке, 
 но не должно происходить перехода из потока в поток, т.к. все это должно быть реализовано в родительском классе
*/
